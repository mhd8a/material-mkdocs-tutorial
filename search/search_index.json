{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index page","text":"<p>For full documentation visit mkdocs.org. Testing</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Fossid/","title":"Fossid","text":"<p>A new, major, software update is now available for all customers and for evaluation purposes for prospects. The recent \u201c21.2\u201d release brings significant updates to the Software Composition Analysis tool for Enterprise, including improvements in the user interface, automatic component identification, OAuth2.0 authentication with Azure AD, and more.</p>"},{"location":"Fossid/#ui-improvements","title":"UI Improvements","text":"<p>The User Interface has been re-designed with a new, always on top, main menu. The re-design offers a cleaner, more uncluttered view, and a more purposeful grouping of features and functionality. Buttons in the scan interface have been removed if there is a corresponding menu item, and new dialog windows are movable and resizable. Further UI additions include:</p> <p>File tree in scans. Language selection in user profile. Adding/creating components manually in scans. Component information is in one single dialog instead of four. Auto-Approval based on License Policies FossID allows creating automatic approval policies for components depending on component license. Component approval requests will then be approved or rejected based on the policy without involvement of an approver. Auto-approvals not only save time and effort, but are a great help enforcing rules and safeguarding against AGPL.</p>"},{"location":"Fossid/#automatic-component-identification","title":"Automatic Component Identification","text":"<p>This new scan option allows for pending identifications to be resolved automatically by assigning the top component match to all files with pending identification and marking those files as identified.</p>"},{"location":"Fossid/#authentication-through-azure-active-directory","title":"Authentication Through Azure Active Directory","text":"<p>FossID now supports OAuth2.0 authentication of WebApp users with Azure Active Directory. FossID users can thus use the same login mechanism as for any other system on the customer premises that also supports the same authentication method. This is both more secure and more convenient.</p>"},{"location":"Fossid/#cpe-identifier-list","title":"CPE Identifier List","text":"<p>FossID maintains a list of components/versions combinations with known CPEs. This information is used to automatically suggest values when manually adding components.</p> <p>The list of component/versions and CPEs is continuously updated out-of-the-box or can be manually updated.</p> <p>Easier Installation and System Maintenance Several improvements and additions have been made to ease installation and system maintenance.</p> <p>The installation and update documentation is now provided in a single, structured document with sections per operating system or specific part configuration instead of being distributed across a number of different files.</p> <p>Background tasks (such as updating vulnerability information for components with CPEs) no longer require the use of crontab. These tasks will be configured and enabled out of the box, and the configuration can now be updated from within the tool.</p> <p>Scanning will be done in a few different steps (such as scanning, cleanup, dependency analysis). Each step is regarded as a process and a process can have different states: QUEUED, RUNNING, FINISHED, FAILED and Idle. The status and details of all processes can be examined from within the WebApp.</p>"},{"location":"Home/","title":"Home","text":"<p>Welcome to Demopages</p> <p></p>"},{"location":"Publish-a-File/","title":"Publish-a-File","text":""},{"location":"Publish-a-File/#publish-a-file","title":"Publish a File","text":"<p>You can publish your file by opening the Publish sub-menu and by clicking Publish to. For some locations, you can choose between the following formats:</p> <ul> <li>Markdown: publish the Markdown text on a website that can interpret it (GitHub for instance),</li> <li>HTML: publish the file converted to HTML via a Handlebars template (on a blog for example).</li> </ul>"},{"location":"ROS/","title":"ROS 2","text":"<p>The Robot Operating System (ROS) is a set of software libraries and tools for building robot applications. From drivers and state-of-the-art algorithms to powerful developer tools, ROS has the open source tools you need for your next robotics project.</p> <p>Since ROS was started in 2007, a lot has changed in the robotics and ROS community. The goal of the ROS 2 project is to adapt to these changes, leveraging what is great about ROS 1 and improving what isn\u2019t.</p> <p>This site contains the documentation for ROS 2. If you are looking for ROS 1 documentation, check out the ROS wiki.</p>"},{"location":"ROS/#installation","title":"Installation","text":"<p>Options for installing ROS 2 Iron Irwin:</p> <p>Binary packages\uf0c1 Binaries are only created for the Tier 1 operating systems listed in REP-2000. Given the nature of Rolling, this list may be updated at any time. If you are not running any of the following operating systems you may need to build from source or use a container solution to run ROS 2 on your platform.</p> <p>We provide ROS 2 binary packages for the following platforms:</p> <p>Ubuntu Linux - Jammy Jellyfish (22.04)</p> <p>Debian packages (recommended)</p> <p>\u201cfat\u201d archive</p> <p>RHEL 9</p> <p>RPM packages (recommended)</p> <p>\u201cfat\u201d archive</p> <p>Windows (VS 2019)</p> <p>Building from source\uf0c1 We support building ROS 2 from source on the following platforms:</p> <p>Ubuntu Linux</p> <p>Windows</p> <p>RHEL/Fedora</p> <p>macOS</p>"},{"location":"Sonarqube/","title":"SonarQube 10.4 Documentation","text":"<p>SonarQube is a self-managed, automatic code review tool that systematically helps you deliver Clean Code. As a core element of our Sonar solution, SonarQube integrates into your existing workflow and detects issues in your code to help you perform continuous code inspections of your projects. The product analyses 30+ different programming languages and integrates into your Continuous Integration (CI) pipeline of DevOps platforms to ensure that your code meets high-quality standards.</p>"},{"location":"Sonarqube/#writing-clean-code","title":"Writing clean code","text":"<p>Clean Code is the standard for all code that results in secure, reliable, and maintainable software therefore, writing clean code is essential to maintaining a healthy codebase. This applies to all code: source code, test code, infrastructure as code, glue code, scripts, and more. For details, see Clean Code.</p> <p>Sonar's Clean as You Code approach eliminates many of the pitfalls that arise from reviewing code at a late stage in the development process. The Clean as You Code approach uses your quality gate to alert/inform you when there\u2019s something to fix or review in your new code (code that has been added or changed), allowing you to maintain high standards and focus on code quality.</p> <p>Developing with Sonar</p> <p></p>"}]}